#---
#apiVersion: sso.apps.tanzu.vmware.com/v1alpha1
#kind: ClientRegistration
#metadata:
#  name: my-client-registration
#  namespace: #@ namespace
#spec:
#  authServerSelector:
#    matchLabels: #@ data.values.authserver_selector
#  redirectURIs:
#    - #@ redirect_uri
#  requireUserConsent: false
#  clientAuthenticationMethod: client_secret_basic
#  authorizationGrantTypes:
#    - "authorization_code"
#  scopes:
#    - name: "openid"
#    - name: "email"
#    - name: "profile"
#    - name: "roles"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: token-viewer
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      name: token-viewer
  template:
    metadata:
      labels:
        name: token-viewer
    spec:
      containers:
        - image: bitnami/oauth2-proxy:7.3.0
          name: proxy
          ports:
            - containerPort: 4180
              name: proxy-port
              protocol: TCP
          env:
            - name: ISSUER_URI
              value: http://authserver.127.0.0.1.nip.io
            - name: CLIENT_ID
              value: test-client
            - name: CLIENT_SECRET
              value: test-secret
          command: [ "oauth2-proxy" ]
          args:
            - --oidc-issuer-url=$(ISSUER_URI)
            - --client-id=$(CLIENT_ID)
            - --insecure-oidc-skip-issuer-verification=true
            - --client-secret=$(CLIENT_SECRET)
            - --cookie-secret=0000000000000000
            - --cookie-secure=false
            - --http-address=http://:4180
            - --provider=oidc
            - --scope=openid email profile
            - --email-domain=*
            - --insecure-oidc-allow-unverified-email=true
            - --oidc-groups-claim=groups
            - --upstream=http://127.0.0.1:8000
            - #@ "--redirect-url=" + redirect_uri
            - --ssl-upstream-insecure-skip-verify=true
            - --ssl-insecure-skip-verify=true
            - --skip-provider-button=true
            - --pass-authorization-header=true
            - --prefer-email-to-user=true
            - --whitelist-domain=authserver.127.0.0.1.nip.io
        - image: python:3.9
          name: application
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
          command: [ "python" ]
          args:
            - -c
            - |
              from http.server import HTTPServer, BaseHTTPRequestHandler
              import base64
              import json
              import urllib.parse

              class Handler(BaseHTTPRequestHandler):
                  def do_GET(self):
                      if self.path == "/token":
                          self.token()
                      elif self.path == "/jwt":
                          self.jwt()
                      else:
                          self.greet()

                  def greet(self):
                      username = self.headers.get("x-forwarded-user")
                      self.send_response(200)
                      self.send_header("Content-type", "text/html")
                      self.end_headers()
                      
                      token = self.headers.get("Authorization").split("Bearer ")[-1]
                      encoded_header, encoded_payload, *rest = token.split(".")
                      
                      decoded_payload = base64.urlsafe_b64decode(bytes(encoded_payload, "utf-8") + b'==').decode("utf-8")
                      payload = json.dumps(json.loads(decoded_payload), indent=2)
                      
                      decoded_header = base64.urlsafe_b64decode(bytes(encoded_header, "utf-8") + b'==').decode("utf-8")
                      header = json.dumps(json.loads(decoded_header), indent=2)
                      
                      authserver_endsession_uri = urllib.parse.quote_plus("http://authserver.127.0.0.1.nip.io/connect/logout?id_token_hint=" + token)
                      sign_out_url = "/oauth2/sign_out?rd=" + authserver_endsession_uri 
                        
                      page = f"""
                      <h1>It Works!</h1>
                      <p>You are logged in as <b>{username}</b></p>
                      <p><a href="/jwt">Show me my id_token (JWT format)</a></p>
                      <p><a href="/token">Show me my id_token (JSON format)</a></p>
                      <p><a href="{sign_out_url}">Sign Out</a></p>
                      <hr/>
                      <h2>JWT</h2>
                      <h3>Encoded</h3>
                      <p style="word-wrap: break-word;">{token}</p>
                      <h3>Header</h3>
                      <pre>{header}</pre>
                      <h3>Payload</h3>
                      <pre>{payload}</pre>
                      """
                      self.wfile.write(page.encode("utf-8"))

                  def token(self):
                      self.send_response(200)
                      self.send_header("Content-type", "application/json")
                      self.end_headers()
                      token = self.headers.get("Authorization").split("Bearer ")[-1]
                      encoded_header, encoded_payload, *rest = token.split(".")
                      decoded_payload = base64.urlsafe_b64decode(bytes(encoded_payload, "utf-8") + b'==').decode("utf-8")
                      payload = json.dumps(json.loads(decoded_payload), indent=2)
                      self.wfile.write(payload.encode("utf-8"))

                  def jwt(self):
                      token = self.headers.get("Authorization").split("Bearer ")[-1]
                      self.send_response(200)
                      self.send_header("Content-type", "text/plain")
                      self.end_headers()
                      self.wfile.write(token.encode("utf-8"))

              server_address = ('', 8000)
              httpd = HTTPServer(server_address, Handler)
              httpd.serve_forever()

---
apiVersion: v1
kind: Service
metadata:
  name: token-viewer
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: proxy-port
      name: proxy-svc-port
  selector:
    name: token-viewer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: token-viewer
  namespace: default
spec:
  rules:
    - host: token-viewer.127.0.0.1.nip.io
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: token-viewer
                port:
                  name: proxy-svc-port
