#@ load("@ytt:data", "data")
#@
#@ domain = data.values.domain
#@ fqdn = "dex." + domain
#@
#!
#! Deployment for Dex, including service, ingress, root CA and Certificate
---
kind: Namespace
apiVersion: v1
metadata:
  name: dex
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dex-config
  namespace: dex
  annotations:
    kapp.k14s.io/versioned: ""
data:
  #@yaml/text-templated-strings
  config.yml: |
    issuer: "https://(@= fqdn @)"
    storage:
      type: sqlite3
      config:
        file: /db/dex.db
    web:
      http: 0.0.0.0:5556
    staticClients:
      - id: appsso
        redirectURIs:
          - "https://authserver.demo.(@= domain @)/login/oauth2/code/openid-provider"
        name: 'Example App'
        secret: appsso-secret
        grant_types:
          - authorization_code
          - client_credentials
    enablePasswordDB: true
    staticPasswords:
      - email: "user@example.com"
        hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
        username: "jdoe"
        userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dex
  namespace: dex
  labels:
    app: dex
spec:
  replicas: 1
  template:
    metadata:
      name: dex
      labels:
        app: dex
    spec:
      containers:
        - name: dex
          image: bitnami/dex:2.37.0
          imagePullPolicy: IfNotPresent
          command:
            - dex
          args:
            - serve
            - /config/config.yml
          volumeMounts:
            - mountPath: /config
              name: config
            #! emptyDir volume to create the sqlite db in
            - mountPath: /db
              name: db
          ports:
            - containerPort: 5556
              name: web
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: dex-config
        - name: db
          emptyDir: {}
      resources:
        limits:
          cpu: 0.5
          memory: 100M
  selector:
    matchLabels:
      app: dex
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  selector:
    app: dex
  ports:
    - port: 80
      targetPort: web
      name: web
  type: ClusterIP
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: dex
  namespace: dex
  annotations:
    kubernetes.io/ingress.class: contour
spec:
  tls:
    - secretName: dex-certificate
      hosts:
        - #@ fqdn
  rules:
    - host: #@ fqdn
      http:
        paths:
          - backend:
              service:
                name: dex
                port:
                  name: web
            pathType: Prefix
            path: "/"
---
kind: Certificate
apiVersion: cert-manager.io/v1
metadata:
  name: dex
  namespace: dex
spec:
  dnsNames:
    - #@ fqdn
  issuerRef:
    name: #@ data.values.issuer
    kind: ClusterIssuer
    group: cert-manager.io
  secretName: dex-certificate
